package garage.controller;

import garage.database.Database;
import garage.model.*;
import garage.hardware.interfaces.*;

/**
 * This class is the controller of a bicycle garage. It handles
 * hardware input and output through hardware interfaces and
 * hardware extensions.
 */
public class Controller implements BarcodeReaderListener {
	private static int USERNAME_LENGTH = 10;
	private static int PASSWORD_LENGTH = 4;
	private static int UNLOCK_TIME = 10;
	private static int GREEN_LED_TIME = 1;
	private static int RED_LED_TIME = 1;
	
	private ElectronicLock frontDoorLock;
	
	private ElectronicLock bikeExitDoorLock;
	
	private PinCodeTerminal pinCodeTerminal;
	
	private BarcodeReader frontDoorBarcodeReader;
	
	private BarcodeReader bikeExitDoorBarcodeReader;
	
	private BarcodePrinter barcodePrinter;
	
	Database database;
	
	KeyPadBuffer buffer;
	
	private String storedUsername = "";

	
	public Controller(Database database, ElectronicLock frontDoorLock,
			ElectronicLock bikeExitDoorLock, PinCodeTerminal pinCodeTerminal,
			BarcodeReader frontDoorBarcodeReader, BarcodeReader bikeExitDoorBarcodeReader,
			BarcodePrinter barcodePrinter) {
		this.database = database;
		
		this.frontDoorLock = frontDoorLock;
		this.bikeExitDoorLock = bikeExitDoorLock;
		this.pinCodeTerminal = pinCodeTerminal;
		this.frontDoorBarcodeReader = frontDoorBarcodeReader;
		this.bikeExitDoorBarcodeReader = bikeExitDoorBarcodeReader;
		this.barcodePrinter = barcodePrinter;
		
		buffer = new KeyPadBuffer(USERNAME_LENGTH, this);
	}
	
	/**
	 * Recieve new input from the buffer.
	 * @param input Input to be recieved from the buffer.
	 */
	public void recieveBuffer(String input) {
		if (input.length() == USERNAME_LENGTH) {
			newUsernameInput(input);
		} else {
			newPasswordInput(input);
		}
	}
	
	/**
	 * Method handles new username input. If username exists, light
	 * up green LED and store the username. If username does not exist,
	 * light up red LED.
	 * @param username Username input.
	 */
	private void newUsernameInput(String username) {
		if (database.userExists(username)) {
			storedUsername = username;
			buffer.setExpectedInput(PASSWORD_LENGTH);
			pinCodeTerminal.lightLED(PinCodeTerminal.GREEN_LED, GREEN_LED_TIME);
		} else {
			storedUsername = "";
			pinCodeTerminal.lightLED(PinCodeTerminal.RED_LED, RED_LED_TIME);
		}
	}
	
	/**
	 * Method handles new password input. If password is correct, unlock
	 * front door. If password is incorrect, light up red LED.
	 * @param password String to be compared to actual password for user.
	 */
	private void newPasswordInput(String password) {
		String correctPassword = database.getPassword(storedUsername);
		if (correctPassword != null && correctPassword.equals(password)) {
			storedUsername = "";
			frontDoorLock.open(UNLOCK_TIME);
			pinCodeTerminal.lightLED(PinCodeTerminal.GREEN_LED, GREEN_LED_TIME);
			//TODO Register checkIn to database
		} else {
			storedUsername = "";
			pinCodeTerminal.lightLED(PinCodeTerminal.RED_LED, RED_LED_TIME);
		}
	}
}
